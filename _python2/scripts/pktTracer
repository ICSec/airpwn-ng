#!/usr/bin/python2

"""
pktTracer is meant as a way to standardize the viewing of timings for airpwn-ng.
As such, the environment must be setup properly for pktTracer to work correctly.
pktTracer needs a total of 3 things:
- vMac:  This is the MAC address of the device you wish to test against
- iFace: This is the NIC we are sniffing with
- chan:  This is the channel we are sniffing on

So, why pktTracer?
airpwn-ng is complicated, period.  Most folks tend to think of this as a MITM.
airpwn-ng is nothing of the sorts.  airpwn-ng is to MITM as the sun is to the moon.
To understand airpwn-ng, one must understand TCP, and how the sequence and acknowledgement numbers work.
If you can see the sequence and acknowledgement numbers, and respond faster than the server, you win.

How to use pktTracer?
You need an interactive python environment to do so.
We could add a count to this sniff function to avoid this, however, every box, when connected via a NIC to the Internet acts differently.
i.e. if you have NTP going on, you'll shoot 30 packets off right away, thus, a count is ill-advised for timing purposes.

Ok, so you're really interested in troubleshooting eh?  Let's continue
If you are fluent with python, mod the raw_inputs() so you don't have to entertain them
If not, then just follow along with them

Now, before we really use pktTracer we have to get it setup
To do this without a video walkthrough requires you to understand "what" we are trying to achieve

Different NICs, act differently.  Some are good, some not so much...  Thus, we must use an equalizer, hence pktTracer

Okay, followed along this far?  Let's talk setup:
Open two shells, one for airpwn-ng and one for pktTracer.
On each shell go ahead and become root.
For our purposes we will consider the target device with the acronym "tgt"

Notate the mac of tgt
tgt MAC is our vMac

Notate your NIC
this is our iFace, i.e. wlan0mon

Notate the channel tgt will be communicating to the AP on
this is our chan

With tgt being disconnected from the AP, go ahead and pre-setup airpwn-ng

Example syntax for open wifi
./airpwn-ng -i wlan0mon -m wlan0mon -t '<tgt mac here>' --injection payloads/wargames

Example syntax for WEP wifi with password of 0123456789 and AP BSSID of aa:bb:cc:dd:ee:ff
./airpwn-ng -i wlan0mon -m wlan0mon -t '<tgt mac here>' --injection payloads/wargames --wep '0123456789' --bssid 'aa:bb:cc:dd:ee:ff'

Example syntax for WPA wifi with password of password, AP BSSID of aa:bb:cc:dd:ee:ff and AP ESSID of wifi
## Of note, WPA currently requires the use of one NIC connected to the AP, thus you see wlan1 below
./airpwn-ng -i wlan1 --inj man -m wlan0mon -t '<tgt mac here>' --wpa 'password' --bssid 'aa:bb:cc:dd:ee:ff' --essid 'wifi'

Got airpwn-ng syntax done?  Go ahead and launch it.  It'll spit some output and then remain silent.


Now, in the pktTracer shell go ahead and launcher the interactive python of your choice
ipython works well for this and is standard in some distros
As this tutorial is drawn around ipython the syntax might be slightly different, if not using ipython google around for it

From ipython do:
%run pktTracer

Same as with airpwn-ng, it will spit some stuff, or if you didn't shortcut the raw_input()'s, it'll ask you info.
You'll know it's ready when it prints:
pktTracer up and running

Okay, at this time you have both airpwn-ng and pktTracer sniffing.  Time for troubleshooting
On the target device, go ahead and ensure all browsing sessions are closed.
curl is recommended as it's easier than loading a browser, but hey, to each their own.
Take the target device, and proceed to connect it to the AP.
As soon as you do this, pktTracer will begin spitting output
If you are testing WPA, it will spit out EAPOL information, otherwise it will remain silent

At this point, you have made the connection from the tgt to the AP.
On the tgt, proceed to, or curl an http website of your choice.

HTTP -NOT- HTTPS

At this point, airpwn-ng will have attempted an injection and been successful, or it will have failed.
airpwn-ng is not 100%, it's all about race conditions here.

What will definitely have happened however, is that pktTracer will have captured data.
Successfull injections aside, on the pktTracer shell, go ahead and press crtl+c
then do:
wireshark(p)

Wireshark will open and most likely spit out a warning, disregard it.

Depending on your setup, if you have WEP or WPA to test against,
you will have to input the info to dissect decrypted packets.
If you are testing on open you may skip this next section.

In wireshark do:
Click View | Wireless Toolbar

A new toolbar will appear, from there click:
802.11 Preferences

For the window that opens, ensure IEEE 802.11 on the left hand side is selected
Select Enable decryption
Click Edit to the right of "Decryption keys"

A new window will appear.  Select the + on the bottom left hand side.
In the newline that appears, do the following:
    - For WEP:
        - Select wep for Key type column
        - Left-click the Key column, and then double-click it, enter in your WEP password
    - For WPA:
        - Select wpa-pwd for the Key type column
        - Left-click the Key column, and then double-click it, enter in:
            - <WPA Password>:<ESSID>
            - An example where the password is password and the network name is foo:
                - password:foo
Having entered in the information, select OK, then select OK again.
Your packets will then be decrypted in Wireshark.

At this point, Open, WEP or WPA is now visible.
Scroll down through the packets and look for the GET / request.
Notate the time.

It's at this point that the race has begun.  If airpwn-ng was successful, you will see the injected response.
Notate the time.
If airpwn-ng was not successful, you will see the real response.
Notate the time.

At this point, the race is over, time to check for 2nd place.

Hopefully airpwn-ng was successful.  If so, then you will see what wireshark calls a duplicate.
Notate the time.

If airpwn-ng was not successful, you will see your injected response as the duplicate.
Notate the time.

Compare your times.

If airpwn-ng won the race, congratulations.

If airpwn-ng is being too slow, please go back to the pktTracer shell, exit out and store troubleshoot.pcap somewhere.
Repeat the steps a couple times and average it out.  airpwn-ng, will hopefully win more than lose.
If airpwn-ng consistently shows as the loser, please store a couple of the fastest losing pcaps and email them to us.

If airpwn-ng isn't injecting, please repeat the steps a couple times and see if it was just a fluke.
If it proves not to be a fluke, please store a couple of the pcaps and email them to us.

Support for airpwn-ng can be reached at:
support@n900-hackers.org

Please include in the Subject Line:
airpwn-ng support request

Please include in the body as many details as possible, to include:
Monitor Mode NIC type
Injector Mode NIC type (if applicable)
A description of how you did, what you did
Finally, please include the pcaps as attachments.
"""


from scapy.all import *
import subprocess

vMac = raw_input('What is the MAC of the target device?\n')
iFace = raw_input('What is the NIC name of your monitor mode NIC [i.e. wlan0mon]\n')
chan = raw_input('What is the wifi channel we are auditing?\n')
subprocess.call('iwconfig %s channel %s' % (iFace, chan), shell=True)
mac = vMac.lower()

print 'pktTracer up and running'
p = sniff(iface = iFace,
          prn = lambda y: y.summary(),
          lfilter = lambda x: (x[Dot11].type ==2 and (x.addr1 == mac or x.addr2 == mac)) or x.haslayer(EAPOL))
